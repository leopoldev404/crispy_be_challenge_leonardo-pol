@page "/"

@inject HttpClient httpClient

<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #f4f4f4;
        margin: 0;
        padding: 0;
    }

    h3 {
        color: #333;
    }

    div {
        margin-bottom: 15px;
    }

    input {
        padding: 10px;
        width: 200px;
        border-radius: 3px;
        border: 1px solid #ccc;
    }

    button {
        padding: 10px 20px;
        background-color: #007BFF;
        color: white;
        border: none;
        border-radius: 3px;
        cursor: pointer;
    }

    ul {
        list-style-type: none;
        padding: 0;
    }
</style>

<h3>Todo</h3>

<div>
    <input type="text" @bind="newTodoText" placeholder="New Todo" />
    <button @onclick="AddTodo">Add</button>
</div>

<ul>
    @foreach (var todo in todos)
    {
        <li>
            <p style="color:@(todo.Done ? "red" : "black")">@todo.Text</p>
            <button @onclick="() => EditTodo(todo)">Edit</button>
            <button @onclick="() => ChangeTodoState(todo)">Mark as @(todo.Done ? "Incomplete" : "Complete")</button>
            <button @onclick="() => DeleteTodo(todo.Id)">Delete</button>
        </li>
    }
</ul>

@code
{
    private string newTodoText;
    private List<TodoItem> todos = new List<TodoItem>();

    protected override async Task OnInitializedAsync()
    {
        // todos = await Http.GetFromJsonAsync<List<TodoItem>>("api/todo");
    }

    async void AddTodo()
    {
        if (!string.IsNullOrWhiteSpace(newTodoText))
        {
            todos.Add(new TodoItem(newTodoText));
            newTodoText = "";
            @* await Http.PostAsJsonAsync("api/todo", todo); *@
            @* todos.Add(todo); *@
            @* newTodoText = string.Empty; *@
        }
    }

    async void EditTodo(TodoItem todo)
    {
        newTodoText = todo.Text;
        @* await Http.PutAsJsonAsync($"api/todo/{todo.Id}", todo); *@
    }

    async void ChangeTodoState(TodoItem todo)
    {
        todo.Done = !todo.Done;
        // call api to update state
    }

    async void DeleteTodo(string id)
    {
        var itemToRemove = todos.SingleOrDefault(todo => todo.Id == id);
        todos.Remove(itemToRemove);
        // call api to delete todo
    }
}
